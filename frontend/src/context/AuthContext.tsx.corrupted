import React, { createContext, useContext, useState, useEffect } from 'react';

interface User {
  id: number;
  email: string;
  displayName: string | null;
  isAdmin: boolean;
  isActive: boolean;
}

interface AuthContextType {
  user: User | null;
  token: string | null;
  isAut      // Update user in state and localStorage
      if (user) {
        const updatedUser: User = {
          ...user,
          displayName: responseData.display_name
        };
        setUser(updatedUser);
        localStorage.setItem('user', JSON.stringify(updatedUser));ed: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (email: string, password: string, displayName?: string) => Promise<void>;
  changePassword: (currentPassword: string, newPassword: string) => Promise<void>;
  updateProfile: (displayName: string) => Promise<void>;
  logout: () => void;
  initiateGoogleLogin: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  
  // Helper function to create a proper User object from data
  const createUserObject = (data: any): User => {
    return {
      id: data.id || data.user_id,
      email: data.email,
      displayName: data.display_name || data.displayName || data.email.split('@')[0],
      isAdmin: data.is_admin || data.isAdmin || false,
      isActive: data.is_active !== undefined ? data.is_active : 
               (data.isActive !== undefined ? data.isActive : true)
    };
  };
  
  // Check for token and user info in localStorage on mount
  useEffect(() => {
    const storedToken = localStorage.getItem('token');
    const storedUserString = localStorage.getItem('user');
    
    if (storedToken && storedUserString) {
      try {
        const storedUserData = JSON.parse(storedUserString);
        setToken(storedToken);
        setUser(createUserObject(storedUserData));
      } catch (e) {
        console.error("Failed to parse user data from localStorage", e);
      }
    }
    
    // Check URL for token from OAuth (Google login)
    const params = new URLSearchParams(window.location.search);
    const urlToken = params.get('token');
    const urlUserId = params.get('userId');
    const urlEmail = params.get('email');
    const urlDisplayName = params.get('displayName');
    
    // If token is in URL (from OAuth redirect), save it
    if (urlToken && urlUserId && urlEmail) {
      const userData = {
        id: parseInt(urlUserId),
        email: urlEmail,
        displayName: urlDisplayName || urlEmail.split('@')[0],
        isAdmin: false, // Default to false, will be updated from API
        isActive: true  // Default to true for new logins
      };
      
      localStorage.setItem('token', urlToken);
      localStorage.setItem('user', JSON.stringify(userData));
      setToken(urlToken);
      setUser(userData);
      
      // Clean the URL
      window.history.replaceState({}, document.title, window.location.pathname);
      
      // After successful OAuth login, fetch user data to get actual admin status
      fetchUserData(urlToken);
    }
    
    setIsLoading(false);
  }, []);
  
  // Helper function to get user data including admin status
  const fetchUserData = async (authToken: string) => {
    try {
      const response = await fetch('/api/auth/me', {
        headers: {
          'Authorization': `Bearer ${authToken}`
        }
      });
      
      if (response.ok) {
        const userData = await response.json();
        const user = createUserObject(userData);
        setUser(user);
        localStorage.setItem('user', JSON.stringify(user));
      }
    } catch (err) {
      console.error("Failed to fetch user data", err);
    }
  };

  const login = async (email: string, password: string) => {
    try {
      setIsLoading(true);
      
      // Using URLSearchParams to properly format form data for FastAPI's OAuth2PasswordRequestForm
      const formData = new URLSearchParams();
      formData.append('username', email);  // FastAPI expects 'username'
      formData.append('password', password);
      
      const response = await fetch('/api/auth/token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: formData,
      });
      
      if (!response.ok) {
        try {
          const errorData = await response.json();
          throw new Error(errorData.detail || 'Login failed');
        } catch (parseError) {
          // If we can't parse the error as JSON, return the status text
          console.error('Error parsing response:', parseError);
          const errorText = await response.text();
          console.error('Response text:', errorText);
          throw new Error(`Login failed: ${response.statusText}`);
        }
      }
      
      // Safely parse the response
      let data;
      try {
        data = await response.json();
      } catch (parseError) {
        console.error('Error parsing successful response:', parseError);
        throw new Error('Invalid response format from server');
      }
      
      const userData = createUserObject(data);
      
      // Save in state and localStorage
      setToken(data.access_token);
      setUser(userData);
      localStorage.setItem('token', data.access_token);
      localStorage.setItem('user', JSON.stringify(userData));
      
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (email: string, password: string, displayName?: string) => {
    try {
      setIsLoading(true);
      
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email,
          password,
          display_name: displayName
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'Registration failed');
      }
      
      const data = await response.json();
      
      const userData = createUserObject(data);
      
      // Save in state and localStorage
      setToken(data.access_token);
      setUser(userData);
      localStorage.setItem('token', data.access_token);
      localStorage.setItem('user', JSON.stringify(userData));
      
    } catch (error) {
      console.error('Registration error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    // Clear user data from state and localStorage
    setUser(null);
    setToken(null);
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  };

  const initiateGoogleLogin = async () => {
    try {
      // Get Google login URL from backend
      const response = await fetch('/api/auth/google/login');
      const data = await response.json();
      
      // Redirect to Google's OAuth page
      window.location.href = data.authorization_url;
    } catch (error) {
      console.error('Google login error:', error);
    }
  };

  const changePassword = async (currentPassword: string, newPassword: string) => {
    try {
      setIsLoading(true);

      const response = await fetch('/api/auth/change-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          current_password: currentPassword,
          new_password: newPassword
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'Password change failed');
      }

      return await response.json();
    } catch (error) {
      console.error('Password change error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };
  
  const updateProfile = async (displayName: string) => {
    try {
      setIsLoading(true);
      
      const response = await fetch('/api/auth/update-profile', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          display_name: displayName
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'Profile update failed');
      }
      
      // Update user in state and localStorage
      if (user) {
        const updatedUser = {
          ...user,
          displayName: displayName
        };
        setUser(updatedUser);
        localStorage.setItem('user', JSON.stringify(updatedUser));
      }
      
      return await response.json();
    } catch (error) {
      console.error('Profile update error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const value = {
    user,
    token,
    isAuthenticated: !!user,
    isLoading,
    login,
    register,
    logout,
    changePassword,
    updateProfile,
    initiateGoogleLogin
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
